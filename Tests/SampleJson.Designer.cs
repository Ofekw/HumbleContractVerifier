//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumbleVerifierTests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SampleJson {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SampleJson() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HumbleVerifierTests.SampleJson", typeof(SampleJson).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{\&quot;inputs\&quot;:[{\&quot;internalType\&quot;:\&quot;contract WishToken\&quot;,\&quot;name\&quot;:\&quot;_wish\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;_devaddr\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;_feeAddress\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;_wishPerBlock\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;},{\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;_startBlock\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;constructor\&quot;},{\&quot;anonymous\&quot;:false,\&quot;inputs\&quot;:[{\&quot;indexed\&quot;:t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AladdinMasterchefABI {
            get {
                return ResourceManager.GetString("AladdinMasterchefABI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;contract BallToken&quot;,&quot;name&quot;:&quot;_ball&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_devAddr&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_feeAddress&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_startBlock&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;},{&quot;anonymous&quot;:false,&quot;inputs&quot;:[{&quot;indexed&quot;:true,&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;user&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;indexed&quot;:true,&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;pid&quot;,&quot;type&quot;:&quot;uint256&quot;},{&quot;indexed&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BallMasterchefABI {
            get {
                return ResourceManager.GetString("BallMasterchefABI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\&quot;Address.sol\&quot;:{\&quot;content\&quot;:\&quot;// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return fals [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultiSolContract {
            get {
                return ResourceManager.GetString("MultiSolContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;contract MuscleToken&quot;,&quot;name&quot;:&quot;_muscle&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_devaddr&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_feeAddress&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_musclePerBlock&quot;,&quot;type&quot;:&quot;uint256&quot;},{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_startBlock&quot;,&quot;type&quot;:&quot;uint256&quot;}],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;},{&quot;anonymous&quot;:false,&quot;inputs&quot;:[{&quot;indexed&quot;:true,&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;user&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;indexed [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MuscleABINoReferral {
            get {
                return ResourceManager.GetString("MuscleABINoReferral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SPDX-License-Identifier: MIT\r\n\r\npragma solidity &gt;=0.6.0 &lt;0.9.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned). [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OneGiantContract {
            get {
                return ResourceManager.GetString("OneGiantContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{\r\n  \&quot;language\&quot;: \&quot;Solidity\&quot;,\r\n  \&quot;sources\&quot;: {\r\n    \&quot;/home/bartosz/workspace/CryptoWorkspace/peanut/contracts/contracts/MasterChef.sol\&quot;: {\r\n      \&quot;content\&quot;: \&quot;// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\&quot;@openzeppelin/contracts/math/SafeMath.sol\\\&quot;;\\nimport \\\&quot;./libs/IBEP20.sol\\\&quot;;\\nimport \\\&quot;./libs/SafeBEP20.sol\\\&quot;;\\nimport \\\&quot;@openzeppelin/contracts/access/Ownable.sol\\\&quot;;\\nimport \\\&quot;@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\&quot;;\\nimport [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PeanutMasterChef {
            get {
                return ResourceManager.GetString("PeanutMasterChef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{\r\n  \&quot;language\&quot;: \&quot;Solidity\&quot;,\r\n  \&quot;sources\&quot;: {\r\n    \&quot;/home/bartosz/workspace/CryptoWorkspace/peanut/contracts/contracts/PeanutToken.sol\&quot;: {\r\n      \&quot;content\&quot;: \&quot;pragma solidity 0.6.12;\\n\\nimport \\\&quot;./libs/BEP20.sol\\\&quot;;\\n\\n// PeanutlingToken with Governance.\\ncontract PeanutToken is BEP20(\\\&quot;Peanut Token\\\&quot;, \\\&quot;PEANUT\\\&quot;) {\\n\\t//Burn address\\n\\taddress public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n\\t/// @notice Creates `_amount` token to `_to` [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PeanutTokenSource {
            get {
                return ResourceManager.GetString("PeanutTokenSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;type&quot;: &quot;constructor&quot;,
        ///    &quot;stateMutability&quot;: &quot;nonpayable&quot;,
        ///    &quot;inputs&quot;: [
        ///      {
        ///        &quot;type&quot;: &quot;address&quot;,
        ///        &quot;name&quot;: &quot;_pZap&quot;,
        ///        &quot;internalType&quot;: &quot;contract PolyZapToken&quot;
        ///      },
        ///      {
        ///        &quot;type&quot;: &quot;address&quot;,
        ///        &quot;name&quot;: &quot;_devAddr&quot;,
        ///        &quot;internalType&quot;: &quot;address&quot;
        ///      },
        ///      {
        ///        &quot;type&quot;: &quot;address&quot;,
        ///        &quot;name&quot;: &quot;_feeAddress&quot;,
        ///        &quot;internalType&quot;: &quot;address&quot;
        ///      },
        ///      {
        ///        &quot;type&quot;: &quot;uint256&quot;,
        ///        &quot;name&quot;: &quot;_startBlock&quot;,
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PoolInfoExtraArgs {
            get {
                return ResourceManager.GetString("PoolInfoExtraArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SPDX-License-Identifier: MIT
        ///
        ///pragma solidity &gt;=0.6.0 &lt;0.8.0;
        ///
        ////**
        /// * @dev Wrappers over Solidity&apos;s arithmetic operations with added overflow
        /// * checks.
        /// *
        /// * Arithmetic operations in Solidity wrap on overflow. This can easily result
        /// * in bugs, because programmers usually assume that an overflow raises an
        /// * error, which is the standard behavior in high level programming languages.
        /// * `SafeMath` restores this intuition by reverting the transaction when an
        /// * operation overflows.
        /// *
        /// * Usin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Pulsar2NoEscaping {
            get {
                return ResourceManager.GetString("Pulsar2NoEscaping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SPDX-License-Identifier: MIT\r\n\r\npragma solidity &gt;=0.6.0 &lt;0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity&apos;s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PulsarTokenNotJson {
            get {
                return ResourceManager.GetString("PulsarTokenNotJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\&quot;Address.sol\&quot;:{\&quot;content\&quot;:\&quot;// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return fals [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SlionMasterchef {
            get {
                return ResourceManager.GetString("SlionMasterchef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{\&quot;inputs\&quot;:[{\&quot;internalType\&quot;:\&quot;contract SlionToken\&quot;,\&quot;name\&quot;:\&quot;_slion\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;_devaddr\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;_feeAddress\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;_startBlock\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;}],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;constructor\&quot;},{\&quot;anonymous\&quot;:false,\&quot;inputs\&quot;:[{\&quot;indexed\&quot;:true,\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;user\&quot;,\&quot;type\&quot;:\&quot;address\&quot;},{\&quot;i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SlionMasterchefABI {
            get {
                return ResourceManager.GetString("SlionMasterchefABI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\&quot;Address.sol\&quot;:{\&quot;content\&quot;:\&quot;// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return fals [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SlionToken {
            get {
                return ResourceManager.GetString("SlionToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{\r\n  \&quot;language\&quot;: \&quot;Solidity\&quot;,\r\n  \&quot;sources\&quot;: {\r\n    \&quot;/root/sukiyaki/sukiyaki-contracts/contracts/MasterChef.sol\&quot;: {\r\n      \&quot;content\&quot;: \&quot;// SPDX-License-Identifier: MIT\\n\\n//https://sukiyakiswap.finance\\n\\npragma solidity 0.6.12;\\n\\nimport \\\&quot;@openzeppelin/contracts/math/SafeMath.sol\\\&quot;;\\nimport \\\&quot;./libs/IBEP20.sol\\\&quot;;\\nimport \\\&quot;./libs/SafeBEP20.sol\\\&quot;;\\nimport \\\&quot;@openzeppelin/contracts/access/Ownable.sol\\\&quot;;\\n\\nimport \\\&quot;./SukiToken.sol\\\&quot;;\\n\\ninterface IMembers {\ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SukiMasterchef {
            get {
                return ResourceManager.GetString("SukiMasterchef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{&quot;inputs&quot;:[{&quot;internalType&quot;:&quot;contract SukiToken&quot;,&quot;name&quot;:&quot;_egg&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_devaddr&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;_feeAddress&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_startBlock&quot;,&quot;type&quot;:&quot;uint256&quot;},{&quot;internalType&quot;:&quot;contract IMembers&quot;,&quot;name&quot;:&quot;_member&quot;,&quot;type&quot;:&quot;address&quot;}],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;},{&quot;anonymous&quot;:false,&quot;inputs&quot;:[{&quot;indexed&quot;:true,&quot;internalType&quot;:&quot;address&quot;,&quot;name&quot;:&quot;user&quot;,&quot;type&quot;:&quot;address&quot;},{&quot;indexed&quot;:t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SukiMasterchefABI {
            get {
                return ResourceManager.GetString("SukiMasterchefABI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{\r\n  \&quot;language\&quot;: \&quot;Solidity\&quot;,\r\n  \&quot;sources\&quot;: {\r\n    \&quot;/root/sukiyaki/sukiyaki-contracts/contracts/SukiToken.sol\&quot;: {\r\n      \&quot;content\&quot;: \&quot;// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n//https://sukiyakiswap.finance\\n\\nimport \\\&quot;./libs/BEP20.sol\\\&quot;;\\n\\n// SukiToken with Governance.\\ncontract SukiToken is BEP20(&apos;Suki Token&apos;, &apos;Suki&apos;) {\\n    // Burn address\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @notice Creates [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SukiToken {
            get {
                return ResourceManager.GetString("SukiToken", resourceCulture);
            }
        }
    }
}
